Supported Build Platforms:

1.) Mac OSX
2.) Windows with Visual Studio 2005 (incomplete)
3.) Cygwin!

What does this environment does:
This clEnvironment API allows you to precompile your OpenCL kernels into
binaries then import them into you C/C++ code as statically defined arrays of
data which can then be re-used with the clCreateEnvironmentFromBins API. The
make system herein also forces the %.cl to %.h conversion to be a dependency
on the successful creation of your program/library/shared object. This means
that if your .cl files do not compile correctly you can not build your target,
thus pushing the run-time OpenCL build stages back into build-time builds. It
also allows you to completely specify a generic OpenCL Kernel call via predefined
structures, thus freeing you to not worry about how to queue/call/pass args/etc.

Required:
In Cygwin and in Windows builds, you must define the path to the OpenCL developer tools. 
I only have NVidia cards so the paths might be biased in that direction. First you'll have to 
install the tools then in your .bashrc or in some setup batch file define your OPENCL_ROOT
$ export OPENCL_ROOT=/cygdrive/<path to sdk>/OpenCL/common
C:\> SET OPENCL_ROOT=<path to sdk>\OpenCL\common

In all builds you must define the LOCAL_ROOT as the base of the OpenCL-Environment build system
$ export LOCAL_ROOT=/cygdrive/<somewhere> # or `pwd` if you are in it.
C:\> SET LOCAL_ROOT=<somewhere> # or %CD%

If you would like some extra debug to see what's going on:
$ export CL_DEBUG=1
C:\> SET CL_DEBUG=1

If you don't want to pre-build your OpenCL binaries or your platform has no real support for it (NVIDIA, i'm looking at you!).
$ export CL_BUILD_RUNTIME=1
C:\> SET CL_BUILD_RUNTIME=1

Compiling:

$ make clean
$ make

Testing:
# for those with TESTCASES
$ make test

Installing:
$ export INSTALL_DIR=/where/ever/you/like
$ make install

What's contained herein:
1.) clEnvironment API
2.) clCompiler which utilizes the clEnvironment API
3.) clQuery which can extract lots of information about your local
    implementation of OpenCL.
4.) clYUV Kernel which can convert a YUV triplet of floats into/from RGB triplets
    of floats in 1 dimension.
5.) clPID Kernel (Proportional Integral and Derivative) control loop calculator.
6.) clImgFilter - Implements a 3x3 edge filter on input LUMA (B/W) images.
7.) clNBody - an implementation of the famous N-body gravity simulator.


